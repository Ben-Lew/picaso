{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Diving into various approximations\n",
    "\n",
    "There are several approximations that go into computing intesity from various phase functions. \n",
    "Here we go through each approximation to show what the effects are of each. Also, to show how to toggle between various inputs. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "#picaso\n",
    "from picaso import justdoit as jdi \n",
    "from picaso import justplotit as jpi \n",
    "from bokeh.plotting import figure, output_file, show\n",
    "from bokeh.layouts import column\n",
    "from bokeh.palettes import Colorblind8"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Start by defining inputs. We can use some base cases to help us out. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "all_inputs = jdi.load_inputs()\n",
    "all_inputs.keys()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Notice that **approx**, **test_mode** and, **disco** all have predefined fields. There is a separate notebook assigned to deal with **opacities**, **test_mode** so they will not be addressed here. You should've already learned in the **StartHere.ipynb** the basics of setting up **planet**, **star** and **atmosphere**. \n",
    "\n",
    "Here you will learn how to toggle with **approx** and, **disco**. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#set planet \n",
    "all_inputs['planet']['gravity'] = 25\n",
    "all_inputs['planet']['gravity_unit'] = 'm/(s**2)' \n",
    "\n",
    "#set star \n",
    "all_inputs['star']['temp'] = 6000\n",
    "all_inputs['star']['metal'] = 0.0122\n",
    "all_inputs['star']['logg'] = 4.437\n",
    "\n",
    "#set atmosphere comp and temp \n",
    "all_inputs['atmosphere']['profile']['filepath'] = jdi.jupiter_pt()\n",
    "#make a copy to have a separate cloud input dict\n",
    "from copy import deepcopy\n",
    "all_inputs_cld=deepcopy(all_inputs)\n",
    "all_inputs_cld['atmosphere']['clouds']['filepath'] = jdi.jupiter_cld()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Starting with Direct (single) Scattering Approximation\n",
    "\n",
    "We'll run each case with and without a cloud so you can see what happens in both regimes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "fig_cloudy = figure(x_range=[0.3,1],y_range=[0,1.2], width=2000, height=690,x_axis_label='Wavelength [μm]', y_axis_label='Geometric Albedo',)\n",
    "fig_no_cloud = figure(x_range=[0.3,1],y_range=[0,1.2], width=2000, height=690,x_axis_label='Wavelength [μm]', y_axis_label='Geometric Albedo',)\n",
    "\n",
    "options = picaso.single_phase_options()\n",
    "colors = Colorblind8[0:len(options)]\n",
    "\n",
    "for approx, c in zip(options, colors):\n",
    "    all_inputs['approx']['single_phase']     = approx\n",
    "    all_inputs_cld['approx']['single_phase'] = approx\n",
    "    wno_nc, alb_nc = jdi.picaso(all_inputs, 0)\n",
    "    wno_c, alb_c = jdi.picaso(all_inputs_cld, 0)\n",
    "    fig_no_cloud.line(1e4/wno_nc, alb_nc, legend=approx, color=c, line_width=3)\n",
    "    fig_cloudy.line(1e4/wno_c, alb_c,  color=c, line_width=3)\n",
    "jpi.plot_format(fig_cloudy)\n",
    "jpi.plot_format(fig_no_cloud)\n",
    "show(column(fig_no_cloud,fig_cloudy ))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Multiple Scattering Approximations"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "fig = figure(x_range=[0.3,1],y_range=[0,1.2], width=2000, height=690,x_axis_label='Wavelength [μm]', y_axis_label='Geometric Albedo',)\n",
    "\n",
    "options = picaso.multi_phase_options()\n",
    "colors = Colorblind8[0:len(options)*2]\n",
    "\n",
    "for approx, c1,c2 in zip(options, colors[0:2], colors[2:]):\n",
    "    all_inputs['approx']['multi_phase']     = approx\n",
    "    all_inputs_cld['approx']['multi_phase'] = approx\n",
    "    wno_nc, alb_nc = jdi.picaso(all_inputs, 0)\n",
    "    wno_c, alb_c = jdi.picaso(all_inputs_cld, 0)\n",
    "    fig.line(1e4/wno_nc, alb_nc, color=c1, line_width=3)\n",
    "    fig.line(1e4/wno_c, alb_c,  color=c2, line_width=3)\n",
    "jpi.plot_format(fig)\n",
    "show(fig)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Raman Scattering Approximations"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "fig_cloudy = figure(x_range=[0.3,1],y_range=[0,1.2], width=2000, height=690,x_axis_label='Wavelength [μm]', y_axis_label='Geometric Albedo',)\n",
    "fig_no_cloud = figure(x_range=[0.3,1],y_range=[0,1.2], width=2000, height=690,x_axis_label='Wavelength [μm]', y_axis_label='Geometric Albedo',)\n",
    "\n",
    "options = picaso.raman_options()\n",
    "colors = Colorblind8[0:len(options)]\n",
    "\n",
    "for approx, c in zip(options, colors):\n",
    "    all_inputs['approx']['raman']     = approx\n",
    "    all_inputs_cld['approx']['raman'] = approx\n",
    "    wno_nc, alb_nc = jdi.picaso(all_inputs, 0)\n",
    "    wno_c, alb_c = jdi.picaso(all_inputs_cld, 0)\n",
    "    fig_no_cloud.line(1e4/wno_nc, alb_nc, legend=approx, color=c, line_width=3)\n",
    "    fig_cloudy.line(1e4/wno_c, alb_c,  color=c, line_width=3)\n",
    "\n",
    "jpi.plot_format(fig_cloudy)\n",
    "jpi.plot_format(fig_no_cloud)\n",
    "show(column(fig_no_cloud,fig_cloudy ))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## The star will impact Raman scattering! Make sure you have the correct stellar spec"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "fig_cloudy = figure(x_range=[0.3,1],y_range=[0,1.2], width=2000, height=690,x_axis_label='Wavelength [μm]', y_axis_label='Geometric Albedo',)\n",
    "fig_no_cloud = figure(x_range=[0.3,1],y_range=[0,1.2], width=2000, height=690,x_axis_label='Wavelength [μm]', y_axis_label='Geometric Albedo',)\n",
    "\n",
    "options = [6000,4000,3500]\n",
    "colors = Colorblind8[0:len(options)]\n",
    "\n",
    "for approx, c in zip(options, colors):\n",
    "    all_inputs['star']['temp']     = approx\n",
    "    all_inputs_cld['star']['temp']     = approx\n",
    "    wno_nc, alb_nc = jdi.picaso(all_inputs, 0)\n",
    "    wno_c, alb_c = jdi.picaso(all_inputs_cld, 0)\n",
    "    fig_no_cloud.line(1e4/wno_nc, alb_nc, legend=str(approx), color=c, line_width=3)\n",
    "    fig_cloudy.line(1e4/wno_c, alb_c,  color=c, line_width=3)\n",
    "\n",
    "all_inputs['approx']['raman']     = 'pollack'\n",
    "all_inputs_cld['approx']['raman']     = 'pollack'\n",
    "wno_nc, alb_nc = jdi.picaso(all_inputs, 0)\n",
    "wno_c, alb_c = jdi.picaso(all_inputs_cld, 0)\n",
    "fig_no_cloud.line(1e4/wno_nc, alb_nc, legend='Pollack', color='black', line_width=2, line_dash='dashed')\n",
    "fig_cloudy.line(1e4/wno_c, alb_c,  color='black', line_width=2, line_dash='dashed')\n",
    "\n",
    "\n",
    "jpi.plot_format(fig_cloudy)\n",
    "jpi.plot_format(fig_no_cloud)\n",
    "show(column(fig_no_cloud,fig_cloudy ))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
